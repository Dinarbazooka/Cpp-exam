Класс Функция с вычислением значения в заданной точке, градиента.


#include "stdafx.h"
#include <iostream>

using namespace std;

class Function
{
protected:
	int n;
public:
	Function(int n)
	{
		this->n = n;
	}
	virtual int Vichislenie(int *x) = 0;
	virtual int* grad(int *x) = 0;
};

class LinFunction : public Function
{
protected:
	int *arr;
public:
	LinFunction(int n, int *arr) : Function(n){
		n++;
		this->arr = new int[n];
		for (int i = 0; i < n; i++) {
			this->arr[i] = arr[i];
		}
	}
	~LinFunction() {
		delete[] arr;
	}
	int Vichislenie(int *x) {
		int result = 0;
		for (int i = 0; i < n; i++)
			result += x[i] * arr[i];
		result += arr[n];
		return result;
	}
	int* grad(int*x) {
		int *result = new int[n];
		for (int i = 0; i < n; i++)
			result[i] = arr[i];
		return result;
	}
};

class quadratic : public LinFunction {
	int **matr;
public:
	quadratic(int n, int *arr, int **matr) : LinFunction(n, arr) {
		this->matr = new int*[n];
		for (int i = 0; i < n; i++) {
			this->matr[i] = new int[n];
			for (int j = 0; j < n; j++)
				this->matr[i][j] = matr[i][j];
		}
	}
	~quadratic() {
		for (int i = 0; i < n; i++)
			delete[] matr[i];
		delete[] matr;
	}
	int Vichislenie(int *x) {
		int result = LinFunction::Vichislenie(x);
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
			{
				result += matr[i][j] * x[i] * x[j];
			}
		return result;
	}
	int* grad(int*x) {
		int *help = LinFunction::grad(x);
		for (int i = 0; i < n; i++) {
			int cur = 0;
			for (int j = 0; j < n; j++)
				cur += matr[i][j] * x[j];
			help[i] += 2 * cur;
		}
		return help;
	}
};

class nerav {
	int number;
	Function* fun;
public:
	inequal(int k, Function* f) {
		number = k;
		fun = f;

	}
	bool IsSuit(int* x) {
		if ((fun->Vichislenie(x)) > number)
			return true;
		return false;
	}

};


int main() {
	setlocale(LC_ALL, "Russian");
	int n;
	cout << "Введите размерность " << endl;
	cin >> n;
	int *arr = new int[++n];
	cout << "Введите коэффициенты линейной части " << endl;
	for (int i = 0; i < n; i++)
		cin >> arr[i];
	n--;
	LinFunction LF(n, arr);
	int *x = new int[n];
	cout << "Введите значения х " << endl;
	for (int i = 0; i < n; i++)
		cin >> x[i];
	cout << "Вычисление " << LF.Vichislenie(x) << endl;
	cout << "Введите матрицу квадратичной формы " << endl;
	int **matr = new int*[n];
	for (int i = 0; i < n; i++) {
		matr[i] = new int[n];
		for (int j = 0; j < n; j++)
			cin >> matr[i][j];
	}
	
	Function* f;
	quadratic qu(n, arr, matr);
	f = &qu;
	int * cur = f->grad(x);
	for (int i = 0; i < n; i++)
		cout << cur[i] << "\t";

	cout << "Вычисление " << (f->Vichislenie(x)) << endl;
	system("pause");
}
