Класс "Graph"

#include "stdafx.h"
#include <iostream>
#include <iomanip>
#include <queue>

using namespace std;
const int N = 20;
int A[] = { 2, 3, 5, 7,	11,	13,	17,	19,	23,	29,	31,	37, 41,	43,	47,	53,	59,	61,	67,	71 };
int m;

class graph {
	friend istream & operator >> (istream &cin, graph &g);
	friend ostream & operator << (ostream &cout, graph &g);
	friend int & Dracula(graph g, int* versh);
	friend int MinPath(int a, int b);
	int n; //Количество вершин
	int ** a; // Матрица смежностей
	int *mark; //Для метода minPath
public:
	graph(int n) {
		this->n = n;
		a = new int *[n];
		for (int i = 0; i < n; i++) {
			a[i] = new int[n];
			for (int j = 0; j < n; j++) {
				a[i][j] = 0;
			}
		}
	}
	//BFS
	int minPath (int c, int b) { 
		if (c == b) return 0;
		bool *mark = new bool[n];
		for (int i = 0; i < n; i++)
			mark[i] = false;
		int *len = new int[n];
		for (int i = 0; i < n; i++)
			len[i] = 0;
		queue <int> q;
		q.push(c);
		mark[c - 1] = true;
		for (; !q.empty(); ) {
			int v = q.front(); q.pop();
			for (int i = 0; i < n; i++)
				if (a[v][i] == 1 && !mark[i]) {
					if (i == b) {
						return len[i] + 1;
						delete[] mark;
						delete[] len;
					}
					q.push(i);
					mark[i] == true;
					len[i] = len[v] + 1;
				}
		}
		delete[] mark; delete[] len;
		return -1;
	}

	bool DFS(int v) {
		mark[v - 1] = 1;
		for (int i = 0; i < n; i++) {
			if (a[v - 1][i] == 1) {
				if (mark[i] == 0) {
					if (DFS(i) == true)
						return true;
				}
				else
					if (mark[i] == 1)
						return true;
			}
			mark[i] = 2;
		}
		return false;
	}

	/*~graph() {
		for (int i = 0; i < n; i++) {
			delete[]a[i];
		}
		delete[]a;
	} */

bool isConnected(int a, int b) {
		if (minPath(a, b) == -1) return false;
		return true;
	}
int kompSviaz() {
	int *help = new int[n];
	for (int i = 0; i < n; i++)
		help[i] = -1;
	for (int i = 0; i < n; i++) {
		help[i] = i;
		for (int j = 0; j < n; j++)
			if (minPath(i + 1, j + 1) != -1 && minPath(i + 1, j + 1) != 0)
				help[j] = help[i];
	}
	int* helph = new int[n];
	int k = 0;
	for (int i = 0; i < n; i++)
		hekph[i] = -1;
	for (int i = 0; i < n; i++) {
		bool flag = true;
		for (int j = 0; j < n; j++) {
			if (helph[j] == help[i])
				flag = false;
		}
		if (flag) {
			helph[k] = help[i];
			k++;
		}
	}
	return k;
}



};

istream & operator >> (istream &cin, graph &g) {
	cout << "Введите количество ребер " << endl;
	cin >> m;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		a--; b--;
		if (a >= 0 && a < g.n && b >= 0 && b < g.n &&a != b) {
			g.a[a][b] = 1;
			g.a[b][a] = 1;
		}
	}
	return cin;
}

ostream & operator << (ostream &cout, graph &g) {
	for (int i = 0; i < g.n; i++) {
		for (int j = 0; j < g.n; j++) cout << setw(3) << g.a[i][j] << " ";
		cout << endl;
	}
	return cout;
}


/*
int & Dracula(graph g, int *versh) {
	versh = new int[g.n];
	for (int i = 0; i < g.n; i++)
		versh[i] = 1;
	int ccount = 0;
	int k = 0;
	for (int i = 0; i<g.n; i++)
	{
		for (int j = k; j<g.n; j++)
		{
			if (g.a[i][j] == 1) {
				versh[i + 1] *= A[ccount];
				versh[j + 1] *= A[ccount++];
			}
		}
		k++;
	}
	return ccount;
} */


int main() {
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	cout << "Введите количество вершин " << endl;
	int k;
	cin >> k;
	graph g(k);
	cin >> g;
	cout << g;
	int* versh = new int[k];
	for (int i = 0; i < k; i++)
		versh[i] = 1;
	int tak = Dracula(g, versh);
	for (int i = 0; i < tak; i++)
		cout << "Значение " << i + 1<< " вершины равно " << versh[i+1] << endl;
	system("pause");
}
